package model;

// Generated 11.06.2012 19:20:40 by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * UserAccount generated by hbm2java
 */
@Entity
@Table(name = "user_account")
public class UserAccount implements java.io.Serializable {

	private int userAccount;
	private Employee employeeBySubjectFk;
	private SubjectType subjectType;
	private Employee employeeByCreatedBy;
	private String username;
	private String passw;
	private Integer status;
	private Date validFrom;
	private Date validTo;
	private Date created;
	private String passwordNeverExpires;

	public UserAccount() {
	}

	public UserAccount(int userAccount) {
		this.userAccount = userAccount;
	}

	public UserAccount(int userAccount, Employee employeeBySubjectFk,
			SubjectType subjectType, Employee employeeByCreatedBy,
			String username, String passw, Integer status, Date validFrom,
			Date validTo, Date created, String passwordNeverExpires) {
		this.userAccount = userAccount;
		this.employeeBySubjectFk = employeeBySubjectFk;
		this.subjectType = subjectType;
		this.employeeByCreatedBy = employeeByCreatedBy;
		this.username = username;
		this.passw = passw;
		this.status = status;
		this.validFrom = validFrom;
		this.validTo = validTo;
		this.created = created;
		this.passwordNeverExpires = passwordNeverExpires;
	}

	@Id
	@Column(name = "user_account", unique = true, nullable = false)
	public int getUserAccount() {
		return this.userAccount;
	}

	public void setUserAccount(int userAccount) {
		this.userAccount = userAccount;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "subject_fk")
	public Employee getEmployeeBySubjectFk() {
		return this.employeeBySubjectFk;
	}

	public void setEmployeeBySubjectFk(Employee employeeBySubjectFk) {
		this.employeeBySubjectFk = employeeBySubjectFk;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "subject_type_fk")
	public SubjectType getSubjectType() {
		return this.subjectType;
	}

	public void setSubjectType(SubjectType subjectType) {
		this.subjectType = subjectType;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "created_by")
	public Employee getEmployeeByCreatedBy() {
		return this.employeeByCreatedBy;
	}

	public void setEmployeeByCreatedBy(Employee employeeByCreatedBy) {
		this.employeeByCreatedBy = employeeByCreatedBy;
	}

	@Column(name = "username", length = 50)
	public String getUsername() {
		return this.username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	@Column(name = "passw", length = 300)
	public String getPassw() {
		return this.passw;
	}

	public void setPassw(String passw) {
		this.passw = passw;
	}

	@Column(name = "status")
	public Integer getStatus() {
		return this.status;
	}

	public void setStatus(Integer status) {
		this.status = status;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "valid_from", length = 13)
	public Date getValidFrom() {
		return this.validFrom;
	}

	public void setValidFrom(Date validFrom) {
		this.validFrom = validFrom;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "valid_to", length = 13)
	public Date getValidTo() {
		return this.validTo;
	}

	public void setValidTo(Date validTo) {
		this.validTo = validTo;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created", length = 29)
	public Date getCreated() {
		return this.created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}

	@Column(name = "password_never_expires", length = 1)
	public String getPasswordNeverExpires() {
		return this.passwordNeverExpires;
	}

	public void setPasswordNeverExpires(String passwordNeverExpires) {
		this.passwordNeverExpires = passwordNeverExpires;
	}

}
